/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;
import Controladores.ControladorTransacciones;
import Modelos.Usuario;
import Modelos.Categoria;
import Modelos.Libro;
import Modelos.PrestamoLibro;
import Modelos.Transaccion;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
/**
 *
 * @author cduar
 */
public class VentanaTransacciones extends javax.swing.JFrame {
    private Usuario usuario;
    private ControladorTransacciones controlador;
    DefaultTableModel modelo;
    /**
     * Creates new form VentanaHistoriaPyD
     */
    public VentanaTransacciones(Usuario usuario) {
        initComponents();
        this.usuario = usuario;
        this.controlador = new ControladorTransacciones();
        modelo=(DefaultTableModel)tablaHistorial.getModel();
        actualizarTablaId(usuario.getCedula());
        txtid.setEditable(false);
        txtid.setText(String.valueOf(usuario.getCedula()));
        btBuscar.setEnabled(false);
        desahabiltarControl_v();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaHistorial = new javax.swing.JTable();
        btVolver = new javax.swing.JButton();
        cboFiltro = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        cboFiltro2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        btBuscar = new javax.swing.JButton();
        btImprimir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        btFiltrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaHistorial.setBackground(new java.awt.Color(255, 255, 255));
        tablaHistorial.setForeground(new java.awt.Color(127, 85, 57));
        tablaHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Accion", "Id Usuario", "Fecha", "Hora", "Detalles"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaHistorial.setSelectionBackground(new java.awt.Color(127, 85, 57));
        tablaHistorial.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(tablaHistorial);
        if (tablaHistorial.getColumnModel().getColumnCount() > 0) {
            tablaHistorial.getColumnModel().getColumn(0).setResizable(false);
            tablaHistorial.getColumnModel().getColumn(0).setPreferredWidth(50);
            tablaHistorial.getColumnModel().getColumn(1).setResizable(false);
            tablaHistorial.getColumnModel().getColumn(1).setPreferredWidth(30);
            tablaHistorial.getColumnModel().getColumn(2).setResizable(false);
            tablaHistorial.getColumnModel().getColumn(2).setPreferredWidth(20);
            tablaHistorial.getColumnModel().getColumn(3).setResizable(false);
            tablaHistorial.getColumnModel().getColumn(3).setPreferredWidth(20);
            tablaHistorial.getColumnModel().getColumn(4).setResizable(false);
            tablaHistorial.getColumnModel().getColumn(4).setPreferredWidth(260);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 710, 320));

        btVolver.setBackground(new java.awt.Color(127, 85, 57));
        btVolver.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btVolver.setForeground(new java.awt.Color(255, 255, 255));
        btVolver.setText("Volver");
        btVolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVolverActionPerformed(evt);
            }
        });
        jPanel1.add(btVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, -1, 30));

        cboFiltro.setBackground(new java.awt.Color(127, 85, 57));
        cboFiltro.setForeground(new java.awt.Color(255, 255, 255));
        cboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Seleccionar-", "Crear Usuario", "Inicio Sesión", "Cerrar Sesión", "Prestamo Libro", "Devolucion Libro", "Editar Usuario", "Agregar Libro", "Editar Libro", "Eliminar Libro", "Agregar Categoria", "Editar Categoria", "Eliminar Categoria", "Generar Reporte" }));
        cboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFiltroActionPerformed(evt);
            }
        });
        jPanel1.add(cboFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 140, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(127, 85, 57));
        jLabel1.setText("Filtro Usuario:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        cboFiltro2.setBackground(new java.awt.Color(127, 85, 57));
        cboFiltro2.setForeground(new java.awt.Color(255, 255, 255));
        cboFiltro2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personal", "General", "Otro Usuario" }));
        cboFiltro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFiltro2ActionPerformed(evt);
            }
        });
        jPanel1.add(cboFiltro2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 120, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(127, 85, 57));
        jLabel2.setText("Cedula:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(127, 85, 57));
        jLabel3.setText("Filtro Estado:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, -1, -1));

        txtid.setBackground(new java.awt.Color(255, 255, 255));
        txtid.setForeground(new java.awt.Color(127, 85, 57));
        txtid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtidKeyTyped(evt);
            }
        });
        jPanel1.add(txtid, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 130, 30));

        btBuscar.setBackground(new java.awt.Color(127, 85, 57));
        btBuscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btBuscar.setText("Buscar");
        btBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, 30));

        btImprimir.setBackground(new java.awt.Color(127, 85, 57));
        btImprimir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btImprimir.setForeground(new java.awt.Color(255, 255, 255));
        btImprimir.setText("Imprimir");
        btImprimir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImprimirActionPerformed(evt);
            }
        });
        jPanel1.add(btImprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 450, -1, 30));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(127, 85, 57));
        jLabel6.setText("Desde:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(127, 85, 57));
        jLabel4.setText("Hasta:");

        btFiltrar.setBackground(new java.awt.Color(127, 85, 57));
        btFiltrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btFiltrar.setForeground(new java.awt.Color(255, 255, 255));
        btFiltrar.setText("Buscar");
        btFiltrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(btFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btFiltrar)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 280, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVolverActionPerformed
        VentanaUsuario x = new VentanaUsuario(usuario);
        x.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btVolverActionPerformed

    private void cboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFiltroActionPerformed
        Object selectedItem = cboFiltro.getSelectedItem();
        
        switch (selectedItem.toString()) {
            case "-Seleccionar-":
                if( txtid.getText().equals("")){
                    actualizarTablaGeneral();
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaId(Integer.parseInt(txtid.getText()));
                }   
                break;
            case "Crear Usuario":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                } 
                break;
            case "Inicio Sesión":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                 
                break;
            case "Cerrar Sesión":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                 
                break;
            case "Prestamo Libro":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Devolucion Libro":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Editar Usuario":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Agregar Libro":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Editar Libro":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Eliminar Libro":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Agregar Categoria":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Editar Categoria":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Eliminar Categoria":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            case "Generar Reporte":
                if( txtid.getText().equals("")){
                    actualizarTablaAccion(selectedItem.toString());
                }else if(Integer.parseInt(txtid.getText()) <= 0 ){
                    actualizarTablaGeneral();
                }else{
                    actualizarTablaAccionAndId(selectedItem.toString() ,Integer.parseInt(txtid.getText()));
                }                      
                break;
            default:
                break;
        }

        
    }//GEN-LAST:event_cboFiltroActionPerformed

    private void cboFiltro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFiltro2ActionPerformed
        Object selectedItem = cboFiltro2.getSelectedItem();
        if(selectedItem.toString().equals("Personal")){
            actualizarTablaId(usuario.getCedula());
            txtid.setText(String.valueOf(usuario.getCedula()));
        }else if(selectedItem.toString().equals("General")){
            actualizarTablaGeneral();
            txtid.setEditable(false);
            txtid.setText("0");
            btBuscar.setEnabled(false);
        }else if(selectedItem.toString().equals("Otro Usuario")){
            txtid.setEditable(true);
            txtid.setText("");
            btBuscar.setEnabled(true);    
        }
    }//GEN-LAST:event_cboFiltro2ActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        if (txtid.getText().equals("")) {
            JOptionPane.showMessageDialog( null , "Ingrese un número de cédula para buscar su historial de préstamos");
            return;
        }

        try {
            int cedula = Integer.parseInt(txtid.getText());
            Usuario usuario1 = controlador.buscarUsu(cedula);
            if (usuario1 != null) {
                actualizarTablaId(cedula);    
            } else {
                JOptionPane.showMessageDialog(null, "El usuario con el número de cédula: " + cedula + " no está registrado");
                txtid.setText("");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Ingrese un número de cédula válido");
        }    
           
    }//GEN-LAST:event_btBuscarActionPerformed

    private void txtidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtidKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) || Character.isWhitespace(c) || (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE )) {
            getToolkit().beep();
            evt.consume();
        }else if (txtid.getText().length() >= 10 && c != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
            
        }
    }//GEN-LAST:event_txtidKeyTyped

    private void btImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImprimirActionPerformed
        if (modelo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "No hay datos en la tabla para generar un reporte ");
            return;
        }
        ArrayList<ArrayList<String>> tabla = new ArrayList<>();
        
        for (int i = 0; i < modelo.getRowCount(); i++) {
            ArrayList<String> fila = new ArrayList<>();

            for (int j = 0; j < modelo.getColumnCount(); j++) {
                fila.add(modelo.getValueAt(i, j).toString());
            }

            tabla.add(fila);
        }

        controlador.enviarDatos(tabla);
        String accion = "Generar Reporte";
        LocalDate fecha = LocalDate.now();
        LocalTime hora = LocalTime.now();
        String detalles = "El usuario " + usuario.getCedula() +" genero un reporte de transacciones del sistema" ;
        Transaccion transaccion = new Transaccion(accion, fecha, hora, detalles, usuario.getCedula());               
        controlador.agregarTransaccion(transaccion);  
    
    }//GEN-LAST:event_btImprimirActionPerformed

    private void btFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltrarActionPerformed
        

        if(jDateChooser1.getDate() == null  || jDateChooser2.getDate() == null ){
            JOptionPane.showMessageDialog( null , " Debe escoger dos fechas para realizar el filtro correctamente");

        }else{
                if (modelo.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(rootPane, "No hay datos en la tabla para filtar por fecha ");
                    return;
                }
                ArrayList<ArrayList<String>> ContenidoTabla = new ArrayList<>();

                for (int i = 0; i < modelo.getRowCount(); i++) {
                    ArrayList<String> fila = new ArrayList<>();

                    for (int j = 0; j < modelo.getColumnCount(); j++) {
                        fila.add(modelo.getValueAt(i, j).toString());
                    }

                    ContenidoTabla.add(fila);
                }

                ArrayList<ArrayList<String>> FilasFiltradas = new ArrayList<>();
                for (ArrayList<String> fila : ContenidoTabla) {
                    String fechaStr = fila.get(2);
                    LocalDate fecha = LocalDate.parse(fechaStr);

                    Date x = jDateChooser1.getDate();
                    Date y = jDateChooser2.getDate();
                    LocalDate fechaInicio = new  java.sql.Date(x.getTime()).toLocalDate();
                    LocalDate fechaFin = new  java.sql.Date(y.getTime()).toLocalDate();

                    if (fecha.isAfter(fechaInicio) && fecha.isBefore(fechaFin)) {
                        FilasFiltradas.add(fila);
                    }
                    if( fecha.equals(fechaFin) ){
                        FilasFiltradas.add(fila);
                    }
                    if(fecha.equals(fechaInicio)  ){
                        FilasFiltradas.add(fila);
                    }
                }

                boorarTabla();

                for (ArrayList<String> fila : FilasFiltradas) {
                    modelo.addRow(fila.toArray(new String[0]));
                }

        }
    }//GEN-LAST:event_btFiltrarActionPerformed

 
    
    public void actualizarTablaAccion(String accion){
        boorarTabla();
        try{
            ArrayList<Transaccion> listaTransacciones = controlador.traerTransacciones();
            for (int i = 0; i < listaTransacciones.size(); i++) {
                Transaccion aux = listaTransacciones.get(i);
                if(aux.getAccion().equals(accion)){
                    Object[] ob = { aux.getAccion(), aux.getId_usuario() ,  aux.getFecha(),aux.getHora(), aux.getDetalles()};
                    modelo.addRow(ob);   
                }
            }

            }catch(Exception ex){
                System.err.println(ex.toString());
            }
    }
    
    public void actualizarTablaAccionAndId(String accion , int cedula){
        boorarTabla();
        try{
            ArrayList<Transaccion> listaTransacciones = controlador.traerTransacciones();            
            for (int i = 0; i < listaTransacciones.size(); i++) {
                Transaccion aux = listaTransacciones.get(i);
                if(aux.getAccion().equals(accion) && aux.getId_usuario() == cedula){
                    Object[] ob = { aux.getAccion(), aux.getId_usuario() ,  aux.getFecha(),aux.getHora(), aux.getDetalles()};
                    modelo.addRow(ob);   
                }
                
            }

            }catch(Exception ex){
                System.err.println(ex.toString());
            }
    }
    
    public void actualizarTablaId(int cedula){
        boorarTabla();
        try{
            ArrayList<Transaccion> listaTransacciones = controlador.traerTransacciones();
            for (int i = 0; i < listaTransacciones.size(); i++) {
                Transaccion aux = listaTransacciones.get(i);
                if( aux.getId_usuario() == cedula){
                    Object[] ob = { aux.getAccion(), aux.getId_usuario() ,  aux.getFecha(),aux.getHora(), aux.getDetalles()};
                    modelo.addRow(ob);   
                }
            }

            }catch(Exception ex){
                System.err.println(ex.toString());
            }
    }
    
    
    public void actualizarTablaGeneral(){
        boorarTabla();
        try{
            ArrayList<Transaccion> listaTransacciones = controlador.traerTransacciones();
            for (int i = 0; i < listaTransacciones.size(); i++) {
                Transaccion aux = listaTransacciones.get(i);
                Object[] ob = { aux.getAccion(), aux.getId_usuario() ,  aux.getFecha(),aux.getHora(), aux.getDetalles()};
                    modelo.addRow(ob);
            }

            }catch(Exception ex){
                System.err.println(ex.toString());
            }
    }
    public void boorarTabla(){
        try{
            for (int i = 0; i < 5 ; i++) {
                for (int j = 0; j < modelo.getRowCount(); j++) {
                    modelo.removeRow(j);
                }
            }
        }catch(NullPointerException e){
        }
        
    }
    
    private void desahabiltarControl_v() {
        for (JTextField textField : Arrays.asList(txtid)) {
            ActionMap map = textField.getActionMap();
            Action action = map.get(DefaultEditorKit.pasteAction);
            action.setEnabled(false);
        }
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btFiltrar;
    private javax.swing.JButton btImprimir;
    private javax.swing.JButton btVolver;
    private javax.swing.JComboBox<String> cboFiltro;
    private javax.swing.JComboBox<String> cboFiltro2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaHistorial;
    private javax.swing.JTextField txtid;
    // End of variables declaration//GEN-END:variables

}
